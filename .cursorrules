# プロジェクトの技術スタック
expertise:
  - Next.js 15
  - TypeScript
  - Tailwind CSS
  - shadcn/ui
  - Jotai
  - Cloudflare Pages
  - Bun
  - Supabase

# コーディングスタイルとベストプラクティス
coding_guidelines:
  components:
    - "コンポーネントは単一責任の原則に従い、小さく保つこと。"
    - "関数型コンポーネントを使用し、クラスコンポーネントは避けること。"
    - "再利用可能なコンポーネントは適切にモジュール化すること。"
    - "ページコンポーネントはパスカルケースで命名し、末尾にPageを付けること。"
    - "ロジックがない共通コンポーネントはcomponentsディレクトリに配置すること。"
    - "shadcn/uiのコンポーネントはcomponents/uiディレクトリ、オリジナルコンポーネントはcomponents/customディレクトリに配置すること。"
  logic:
    - "ロジックは適切にモジュール化し、再利用可能な関数として定義すること。"
    - "ロジックはコンポーネントから分離し、コンポーネントの責任を減らすこと。"
    - "サービスロジックはServerActionを使用し、src/_actionsディレクトリに配置すること。"
    - "ServerActionはシンプルなCRUDのみを担当し、APIはAPI Routesを使用し、app/apiディレクトリに配置すること。"
    - "共通ロジックでhooksがあるものはカスタムフックとしてhooksディレクトリに配置すること。"
    - "共通ロジックでhooksがないものはutilsディレクトリに配置すること。"
  types:
    - "型はtypesディレクトリに配置すること。"
    - "any型は使用しないこと。" 
    - "型はinterfaceを使用し、型推論を活用すること。"
    - "型はconvertToCamelCase関数を使用し、キャメルケースに変換すること。"
    - "convertToCamelCase関数はサービスロジック内で使用すること"
  state_management:
    - "状態管理にはJotaiを使用し、必要に応じてatomやatomFamilyを活用すること。"
    - "グローバル状態の使用を最小限に抑え、ローカル状態を優先すること。"
  routing:
    - "ルーティングにはNext.jsのルーティングを使用し、動的ルートやネストされたルートを適切に構成すること。"
    - "Lazy Importを積極的に使用し、ページ遷移時のパフォーマンスを向上させること。"
  styling:
    - "スタイリングにはTailwind CSSとshadcn/uiを使用し、統一されたデザインシステムを維持すること。"
    - "レスポンシブデザインを実装し、モバイルファーストのアプローチを採用すること。"
  performance_optimization:
    - "React.memo、useMemo、useCallbackを適切に使用し、不要な再レンダリングを防ぐこと。"
    - "非同期処理やデータフェッチングにはSuspenseやError Boundaryを活用すること。"
  error_handling:
    - "エラーハンドリングを徹底し、ユーザーに適切なフィードバックを提供すること。"
    - "Firebaseからのエラーは適切にキャッチし、ユーザーにわかりやすいメッセージを表示すること。"

# コメント
  - "コメントはコードの意図を明確にするために使用すること。"
  - "JSDocを使用し、コードの意図を明確にすること。"

# ビルドとランタイム
build_and_runtime:
  - "ランタイムおよびパッケージマネージャーにはBunを使用し、依存関係の管理とスクリプトの実行を行うこと。"

# Lintとフォーマッター
lint_and_formatter:
  - "コードの品質と一貫性を保つためにBiomeを使用し、Lintとフォーマットを実施すること。"
  - "コミット前に自動的にLintとフォーマットを適用するためのフックを設定すること。"

# データベース
database:
  - "データベースはPostgreSQLを使用し、データベースのテーブルはdatabaseディレクトリに配置すること。"
  - "データベースのテーブルはSQLファイルとして配置し、ファイル名はテーブル名.sqlとすること。"
  - "RLSポリシーを設定すること。"
  - "ポリシーについては自己参照、相互参照を避けること。"
  - "データベースの構造を調べる際のクエリについてはsupabase cliを使用し、docs/databaseディレクトリに配置すること。"
