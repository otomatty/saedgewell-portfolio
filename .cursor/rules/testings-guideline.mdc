---
description: テストに関するガイドライン
globs: 
---
# テストガイドライン

## 基本方針

- テストは開発の初期段階から組み込み、継続的に維持する
- テストカバレッジは重要な機能に対して80%以上を目標とする
- テストは読みやすく、メンテナンス可能であることを重視する
- テストはドキュメントとしても機能するように記述する

## テストの種類と役割

### 1. 単体テスト（Vitest）

#### 対象
- ServerActions
- ユーティリティ関数
- カスタムフック
- Jotai atoms
- UIコンポーネント

#### ルール
- テストファイルは対象ファイルと同じディレクトリに配置し、`.test.ts(x)`の拡張子を使用
- テストケースは`describe`と`test`/`it`を使用して階層的に整理
- モックは必要最小限に抑え、実際の動作に近い形でテスト
- テストケースは以下の形式で記述:
  ```typescript
  describe('対象の機能や関数名', () => {
    test('期待される動作の説明', () => {
      // Arrange（準備）
      // Act（実行）
      // Assert（検証）
    })
  })
  ```

### 2. E2Eテスト（Playwright）

#### 対象
- ユーザーフロー
- クリティカルな機能
- 複数の機能を跨ぐ統合フロー

#### ルール
- テストファイルは`e2e`ディレクトリに配置し、`.spec.ts`の拡張子を使用
- テストケースはユーザーストーリーに基づいて記述
- 重要な画面遷移のスクリーンショットを取得
- デバイスサイズ別のテストを実装（モバイル、タブレット、デスクトップ）

## テストデータ管理

### モックデータ
- `src/tests/mocks`ディレクトリに配置
- 型定義に基づいたモックデータを作成
- Factory関数を使用して動的にテストデータを生成

### テスト環境
- Supabaseのテスト環境を使用
- テスト実行前にデータベースをクリーンアップ
- シードデータを使用して初期状態を設定

## コンポーネントテスト

### レンダリングテスト
- スナップショットテストは最小限に抑える
- コンポーネントの重要な要素の存在を確認
- 異なるプロップスでの表示を検証

### インタラクションテスト
- ユーザーイベントは@testing-library/user-eventを使用
- 非同期処理は適切に待機
- エラー状態とローディング状態を検証

## エラーハンドリング

- エラーケースのテストを必ず含める
- バリデーションエラーの検証
- ネットワークエラーの処理
- 不正な入力値のハンドリング

## CI/CD統合

### GitHub Actions
- プルリクエスト時に自動テスト実行
- テストカバレッジレポートの生成
- E2Eテストの定期実行

### パフォーマンス
- テストの実行時間を監視
- 重いテストは分離して実行
- 並列実行の活用

## ベストプラクティス

### テストの構造
- 1テストケースにつき1つのアサーション
- テストケース間の依存関係を避ける
- セットアップとクリーンアップを適切に行う

### 命名規則
- テスト名は「何をテストするか」が明確に分かるように記述
- 変数名は意図が分かりやすい名前を使用
- モック関数は`mock`プレフィックスを使用

### コメント
- 複雑なテストケースには目的と概要をコメントで説明
- テストデータの特殊な条件はコメントで説明
- TODO/FIXMEコメントは課題管理システムのチケット番号を参照

## メンテナンス

### 定期的なレビュー
- 不要なテストの削除
- 重複したテストの統合
- テストカバレッジの確認と改善

### 更新ガイドライン
- 機能変更時は関連するテストも更新
- テストが失敗した場合は原因を調査し、必要に応じてテストを修正
- 新機能追加時は対応するテストを追加